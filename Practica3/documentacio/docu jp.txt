Juegos de prueba

En aquest apartat explicarem els diferents jocs de prova que hem fet per cada extensió, i comentarem la sortida que dóna el nostre programa.

En les sortides només posarem la part que ens aporta informació sobre quina sortida ha obtingut. A més, veiem que les sortides, en reservar un hotel, el reserva amb el nombre mínim de dies per ciutat, i en incrementar, afegeix només un dia.

Bàsic

Primer recordem quin objectiu té aquesta extensió. Molt simple, fer un viatge que compleixi un mínim de ciutats a visitar tenint en compte la restricció que només es pot anar d'una ciutat a un altre si hi ha un vol que ho permet.

JP_Basic1.pddl :

En aquest joc de proves, provarem que, efectivament, compleix la restricció i no va a la ciutat3, ja que no hi ha cap vol que permeti hi arribar. La resta de les ciutats estan connectades, de manera que por haver-hi diverses solucions correctes, totes aquelles que visitin com a mínim 3 ciutats.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: RESERVAR-VOL-HOTEL VUELO1 CIUTAT1 CIUTAT2 HOTEL2
2: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT4 HOTEL4

Podem veure com compleix la restricció, i dóna el resultat esperat.

JP_Basic2.pddl :

Aquest cas és el mateix que l'anterior però amb dues ciutats com a mínim, sobretot fem aquest cas per a veure si la quantitat de ciutats mínim afecta quina és la ciutat inicial, ja que això ho decideix el sistema.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: RESERVAR-VOL-HOTEL VUELO1 CIUTAT1 CIUTAT2 HOTEL2

Podem veure com compleix la restricció, i dóna el resultat esperat.

JP_Basic3.pddl :

En aquest joc de proves fem un "graf" de vols una mica estrany, tenim les següents connexions entre ciutats: 1-2-3-4-5 i també la connexió 2-5. Posem també que el nombre mínim de ciutats és de 5, de manera que la solució només pot ser una: 1-2-3-4-5, volem veure si l'algoritme tria de manera correcta aquest i no va de la ciutat2 a la ciutat5.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: RESERVAR-VOL-HOTEL VUELO1 CIUTAT1 CIUTAT2 HOTEL2
2: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT3 HOTEL3
3: RESERVAR-VOL-HOTEL VUELO3 CIUTAT3 CIUTAT4 HOTEL4
4: RESERVAR-VOL-HOTEL VUELO4 CIUTAT4 CIUTAT5 HOTEL5

En efecte, l'algorisme no ens defrauda i compleix totes les restriccions.

Extensió1

En aquesta extensió, a part de complir els objectius i les restriccions del Bàsic. També tenim en compte la durada del viatge, és a dir, hi haurà una quantitat de dies mínim i màxims per ciutat, i una quantitat de dies mínims que ha de durar el viatge.

JP_Extensio1_1.pddl :

En aquest cas donem un "graf" de ciutats amb una longitud de 5 ciutats, concretament hem posat el del JP_Basic3.pddl, i hem volgut que el nombre mínim de ciutats sigui 5, però 6 dies mínims, i a cada ciutat com a mínim ha d'estar 1 dia, i màxim 10, ja que volem veure si compleix les restriccions del nombre mínim de ciutats i alhora el del nombre mínim de dies.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: RESERVAR-VOL-HOTEL VUELO1 CIUTAT1 CIUTAT2 HOTEL2
2: MAS-DIAS CIUTAT2
3: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT3 HOTEL3
4: RESERVAR-VOL-HOTEL VUELO3 CIUTAT3 CIUTAT4 HOTEL4
5: MAS-DIAS CIUTAT4
6: RESERVAR-VOL-HOTEL VUELO4 CIUTAT4 CIUTAT5 HOTEL5

Veiem que compleix les restriccions, tot i que afegeix un dia de més, però com no volem optimitzar res, és correcte.

JP_Extensio1_2.pddl :

En aquest cas, per comoditat continuem utilitzant els mateixos vols, hotels i ciutats. L'objectiu és comprovar que si restrictiu el nombre de ciutats a 1, tot i així incrementa els dies que ha d'estar en aquella ciutat per a complir, l'altra restricció.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: MAS-DIAS CIUTAT1
2: MAS-DIAS CIUTAT1
3: MAS-DIAS CIUTAT1
4: MAS-DIAS CIUTAT1
5: MAS-DIAS CIUTAT1

En aquest cas no ha passat com el cas anterior i ha afegit un dia extra, a més, compleix totes les restriccions tal com s'esperava.

JP_Extensio1_3.pddl :

Aquest joc de proves, és molt semblant a l'anterior, però ara ens centrarem en els dies que s'hi assignen a cada ciutat el primer cop que la visitem, per aquest motiu diem que el mínim i màxim son 3, volem visitar 2 ciutats, i com a mínim ha de durar 6 dies. D'aquesta manera no ha d'incrementar cap quantitat de dies per cada ciutat, veurem així si només visitar una ciutat ja li assigna els 3 dies necessaris.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: RESERVAR-VOL-HOTEL VUELO1 CIUTAT1 CIUTAT2 HOTEL2

Com hem dit anteriorment, en ser el nombre de dies mínim 2, en reservar per primera vegada l'hotel, ja el reserva amb el mínim nombre, per això podem veure que la solució és correcte.

JP_Extensio1_4.pddl :

En aquest cas, hem fet un "graf" de ciutats més senzill, tal que els vols són així: 1-2-3-4 i 3-1, d'aquesta manera volem veure, si per complir alguna restricció torna a visitar alguna ciutat que ja ha visitat anteriorment, fet que estaria malament, ja que no ha de tornar a visitar, haguera d'augmentar els dies que hi està en aquella ciutat. Per això diem que els dies mínims són 6 i les ciutats a visitar 4.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: RESERVAR-VOL-HOTEL VUELO1 CIUTAT1 CIUTAT2 HOTEL2
2: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT3 HOTEL3
3: MAS-DIAS CIUTAT3
4: RESERVAR-VOL-HOTEL VUELO4 CIUTAT3 CIUTAT4 HOTEL4
5: MAS-DIAS CIUTAT4

I un cop més, el resultat és tal com s'esperava. A més a més, veiem com en aquest cas tampoc ha afegit dies de més, podem deduir que en el primer exemple, quan ho ha fet ha degut ser causa pel sistema intern i no pel nostre domini, ni problema.

Extensió2

Els objectius i restriccions són els mateixos que l'extensió1 però afegint, que cada ciutat conté un interès, representat per un natural, i l'objectiu és maximitzar l'interès total del viatge, el que s'aconsegueix minimitzant el número de l'interès. Per això afegim l'optimització en el problema, per tant hem de veure si ara no dóna una solució correcta, sinó també si és l'òptima.

JP_Extensio2_1.pddl :

En aquest primer cas, volem confirmar que en afegir que ha d'aconseguir una solució òptima, continua complint les restriccions, per aquest cas només hi ha una possible solució correcta, que és en la mateixa ciutat afegir dies fins a complir els dies mínims necessaris.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: MAS-DIAS CIUTAT1
2: MAS-DIAS CIUTAT1
3: MAS-DIAS CIUTAT1
4: MAS-DIAS CIUTAT1
5: MAS-DIAS CIUTAT1
6: MAS-DIAS CIUTAT1
7: MAS-DIAS CIUTAT1
8: MAS-DIAS CIUTAT1
9: MAS-DIAS CIUTAT1

En efecte, la solució compleix les nostres expectatives.

JP_Extensio2_2.pddl :

En aquest joc de proves, utilitzem el nostre "graf" de ciutats (1-2-3-4-5 i 2-5), en aquest cas hem dit que la ciutat amb un interès més baix és la ciutat5, per a veure si aconsegueix arribar-hi, dient que ha de passar per 3 ciutats, hi ha dues solucions que són les més optimes.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT2 HOTEL2
1: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT3 HOTEL3
2: RESERVAR-VOL-HOTEL VUELO3 CIUTAT3 CIUTAT4 HOTEL4

Bé, aquí tenim tota una sorpresa, no hi ha hagut optimització. La solució no es cap de les dues solucions esperades, ja que no es troba la ciutat5, que ha pogut passar? Hem deduït, com ha passat en l'extensió anterior, que deu ser algun error del sistema, no del domini. Hem arribat a la conclusió, que pot ser, quan arriba a una solució que compleix totes les restriccions no busca cap altra solució que pugui ser més òptima, o si més no, si troba dues solucions seguides que compleixen totes les restriccions i són iguals d'òptimes deixa de buscar més possibles solucions.

Aquesta última solució l'hem deduït, que en tots els casos la primera ciutat és la ciutat1, és estrany que en aquesta ocasió sigui la ciutat2 la ciutat inicial, a més podria a ver sigut que la primera solució que trobes hagués sigut el viatge 1-2-3, que té el mateix interès que el viatge 2-3-4, i per tant, pot ser que hagi conclòs que si aquestes dues solucions tenen el mateix interès, totes les tinguin i per això ha deixat de buscar possibles solucions.

JP_Extensio2_3.pddl :

En aquest cas, continuem utilitzant el mateix problema que en el joc de proves anterior, però ara fem que només sigui possible una solució que sigui la més òptima, i per tant, haguera de sortir aquesta solució: 2-3-4-5. De fet, a part d'aquesta solució només hi ha un altre: 1-2-3-4. Per tant és obvi que haguera d'aconseguir arribar a la primera solució sense dificultats.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT2 HOTEL2
1: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT3 HOTEL3
2: RESERVAR-VOL-HOTEL VUELO3 CIUTAT3 CIUTAT4 HOTEL4
3: RESERVAR-VOL-HOTEL VUELO4 CIUTAT4 CIUTAT5 HOTEL5

Veiem que en aquest cas s'ha complert les nostres expectatives, per tant, veiem que sí que és capaç de trobar la solució més òptima en cas que les possibles solucions no tinguin el mateix interès.

Extensió3

Igual que en l'extensió anterior, en aquesta s'han de continuar complint les restriccions i objectius de l'extensió 1, i a més a més, ara els vols i els hotels tenen un preu cadascun, i ara l'objectiu és minimitzar el preu total del viatge. A més el preu ha d'estar acotat per un preu mínim i un preu màxim que es dóna per l'usuari.

JP_Extensio3_1.pddl :

En aquest cas, és molt semblant a l'anterior, la diferencia és que ara el preu dels vols són diferents, tots valen 10 excepte el 5 que val 1, però si tria aquest vol és impossible que compleixi les restriccions, volem "temptar" a l'algoritme, a veure si cau en la trampa.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: RESERVAR-VOL-HOTEL VUELO1 CIUTAT1 CIUTAT2 HOTEL2
2: MAS-DIAS CIUTAT2
3: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT3 HOTEL3
4: RESERVAR-VOL-HOTEL VUELO3 CIUTAT3 CIUTAT4 HOTEL4
5: RESERVAR-VOL-HOTEL VUELO4 CIUTAT4 CIUTAT5 HOTEL5

Hem vist com no hem pogut "enganyar" a l'algoritme, i ens ha donat una solució que compleix totes les restriccions.

JP_Extensio3_2.pddl :

Aquesta vegada, el que canviem són els preus dels hotels, però ara sí que és possible trobar una solució més optima, volem veure si la tria.

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT3 HOTEL3
1: MAS-DIAS CIUTAT3
2: RESERVAR-VOL-HOTEL VUELO3 CIUTAT3 CIUTAT4 HOTEL4
3: MAS-DIAS CIUTAT4
4: RESERVAR-VOL-HOTEL VUELO4 CIUTAT4 CIUTAT5 HOTEL5
5: MAS-DIAS CIUTAT5

En efecte, veiem com a aconseguit optimitzar el viatge i triar la més optima.

Extensió4

Aquesta extensió consisteix a combinar les extensions 2 i 3, però podem triar al nostre gust si és més important el preu o l'interès

JP_Extensio4_1.pddl :

Aquest joc de proves, li dóna la mateixa importància als dos, de manera podrem comparar aquesta solució amb els següents jocs de proves

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT2 HOTEL2
1: MAS-DIAS CIUTAT2
2: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT3 HOTEL3
3: MAS-DIAS CIUTAT3
4: RESERVAR-VOL-HOTEL VUELO3 CIUTAT3 CIUTAT4 HOTEL4
5: MAS-DIAS CIUTAT4

Veiem, com a triat el cas que és igual, tant per a interès, com per a preu.

JP_Extensio4_2.pddl :

En aquest multipliquem per deu el preu, de manera que tindrà un major pes en la solució

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT1 HOTEL1
1: MAS-DIAS CIUTAT1
2: RESERVAR-VOL-HOTEL VUELO1 CIUTAT1 CIUTAT2 HOTEL2
3: MAS-DIAS CIUTAT2
4: RESERVAR-VOL-HOTEL VUELO2 CIUTAT2 CIUTAT3 HOTEL3
5: MAS-DIAS CIUTAT3

Veiem com a triat el cas que és més favorable per a un preu mínim.

JP_Extensio4_3.pddl :

En aquest últim fem al contrari que en l'anterior, multipliquem per deu l'interès

OUTPUT:
step 0: CIUDAD-INICIO CIUTAT3 HOTEL3
1: MAS-DIAS CIUTAT3
2: RESERVAR-VOL-HOTEL VUELO3 CIUTAT3 CIUTAT4 HOTEL4
3: MAS-DIAS CIUTAT4
4: RESERVAR-VOL-HOTEL VUELO4 CIUTAT4 CIUTAT5 HOTEL5
5: MAS-DIAS CIUTAT5

Veiem com a triat el cas que és més favorable per a un preu mínim.